<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Product;

/**
 * BinRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BinRepository extends \Doctrine\ORM\EntityRepository
{
   /*
    * Получаем количество и всю сумму проданного продукта
    */
    public function getAllBinProducts($bar, $product, $start_date, $end_date)
    {
         $qb = $this->createQueryBuilder('b')
                    ->select('b')
                    ->innerJoin('b.check', 'c')
                    ->innerJoin('b.product', 'p')
                    ->where('c.bar = :bar')
                    ->andWhere('b.product = :product')
                    ->andWhere('b.created >= :start_date')
                    ->andWhere('b.created <= :end_date')
                    ->setParameter('bar', $bar)
                    ->setParameter('product', $product)
                    ->setParameter('start_date', $start_date)
                    ->setParameter('end_date', $end_date)
                    ->addSelect('SUM(p.cost) as total')
                    ->addSelect('COUNT(c.id) as sales')
                    ->groupBy('b.product');

        return $qb->getQuery()->getResult();
    }

   /*
    * Получаем кол-во и сумму продаж всех товаров 
    */
    public function getSalesProduct($bar, $start_date = "", $end_date = "")
    {
        $qb = $this->createQueryBuilder('b')
                   ->select('b')
                   ->innerJoin('b.check', 'c')
                   ->innerJoin('b.product', 'p')
                   ->where('c.bar = :bar')
                   ->setParameter('bar', $bar)
                   ->addSelect('SUM(p.cost) as total')
                   ->addSelect('COUNT(c.id) as sales')
                   ->addSelect('SUM(b.is_free) as free');
        if ($start_date && $end_date) {
                $qb->andWhere('DATE(b.created) >= :start_date')
                   ->andWhere('DATE(b.created) <= :end_date')
                   ->setParameter('start_date', $start_date)
                   ->setParameter('end_date', $end_date);
        }
                $qb->groupBy('b.product')
                   ->orderBy('sales', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * @return mixed
     */
    public function getCountAllBin()
    {
        $qb = $this->createQueryBuilder('b')
            ->select('COUNT(b) as countBin');

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param Product $product
     *
     * @return mixed
     */
    public function getCountBinByProduct(Product $product)
    {
        $qb = $this->createQueryBuilder('b')
            ->select('COUNT(b) as countBin')
            ->andWhere('b.product = :product')
            ->setParameter('product', $product);

        return $qb->getQuery()->getSingleScalarResult();
    }
}
